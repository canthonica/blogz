from main.py
def blog():
blog_id = request.args.get('id')

    if blog_id == None:
        posts = Blog.query.all()
        return render_template('blog_page.html', posts=posts, title='Build a blog')
    else:
        post = Blog.query.get(blog_id)

def newpost():
if request.method == 'POST':
        blog_title = request.form['blog-title']
        blog_body = request.form['blog-entry']
        title_error = ''
        body_error = ''

        if not blog_title:
            title_error = "Please enter a blog title"
        if not blog_body:
            body_error = "Please enter a blog entry"

        if not body_error and not title_error:
            new_entry = Blog(blog_title, blog_body)     
            db.session.add(new_entry)
            db.session.commit()        
            return redirect('/blog?id={}'.format(new_entry.id)) 
        else:
            return render_template('newpost.html', title='New Entry', title_error=title_error, body_error=body_error, 
                blog_title=blog_title, blog_body=blog_body)


1st part of code working
from flask import Flask, request, redirect, render_template, session, flash
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['DEBUG'] = True
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://build-a-blog:buildablog@localhost:8889/build-a-blog'
app.config['SQLALCHEMY_ECHO'] = True
db = SQLAlchemy(app)
#app.secret_key = '12qwaszx34erdfcv'

class Blog(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120))
    body = db.Column(db.String(240))
    completed = db.Column(db.Boolean)

    def __init__(self, title):
        self.title = title
        #self.body = body
        self.completed = False

@app.route('/', methods=['POST', 'GET'])
def index():

    if request.method == 'POST':
        task_name = request.form['task']
        new_task = Blog(task_name)
        db.session.add(new_task)
        db.session.commit()

    tasks = Blog.query.filter_by(completed=False).all()
    completed_tasks = Blog.query.filter_by(completed=True).all()
    return render_template('add_blog.html',title="Get It Done!", 
        tasks=tasks, completed_tasks=completed_tasks)
'''
@app.route('/newpost', methods=['POST', 'GET'])
def newpost():
    
    return render_template('add-blog.html')
'''

@app.route('/delete-task', methods=['POST'])
def delete_task():

    task_id = int(request.form['task-id'])
    task = Blog.query.get(task_id)
    task.completed = True
    db.session.add(task)
    db.session.commit()

    return redirect('/')


if __name__ == '__main__':
    app.run()
--------------------
example
-----------------------
class Blog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120))
    body = db.Column(db.Text)

    def __init__(self, title, body):
        self.title = title
        self.body = body

@app.route('/')
def index():
    return redirect('/blog')

@app.route('/blog')
def blog():
    blog_id = request.args.get('id')

    if blog_id == None:
        posts = Blog.query.all()
        return render_template('blog.html', posts=posts, title='Build-a-blog')
    else:
        post = Blog.query.get(blog_id)
        return render_template('entry.html', post=post, title='Blog Entry')

@app.route('/newpost', methods=['POST', 'GET'])
def new_post():
    if request.method == 'POST':
        blog_title = request.form['blog-title']
        blog_body = request.form['blog-entry']
        title_error = ''
        body_error = ''

        if not blog_title:
            title_error = "Please enter a blog title"
        if not blog_body:
            body_error = "Please enter a blog entry"

        if not body_error and not title_error:
            new_entry = Blog(blog_title, blog_body)     
            db.session.add(new_entry)
            db.session.commit()        
            return redirect('/blog?id={}'.format(new_entry.id)) 
        else:
            return render_template('newpost.html', title='New Entry', title_error=title_error, body_error=body_error, 
                blog_title=blog_title, blog_body=blog_body)
    
    return render_template('newpost.html', title='New Entry')

if  __name__ == "__main__":
    app.run()
----------------------
    add_blog stuff

    {% extends "base.html" %}

{% block content %}
    <h1>Add Blog Entry</h1>
    <br>
    <form method='post'>
        <label>Title:
            <br>
            <input type="text" name='blog-title' value="{{blog_title}}">
        </label>
        <p class="error">{{title_error}}</p>
        <label>Blog Entry:
            <br>
            <textarea name="blog-entry" style="width:540px; height:125px;">{{blog_body}}</textarea>
        </label>
        <p class="error">{{body_error}}</p>
        <input type="submit" value='Add Entry'>
    </form>
{% endblock %}   

-------------------------
{% extends "base.html" %}

{% block content %}
    
    <h1>Build a Blog</h1>

    {% if posts|length == 0 %}
    <h3>No blog posts yet.</h3>
    {% else %}
    
    {% for post in posts %}
    
    <a href="/blog?id={{post.id}}"><h2>{{post.title}}</h2></a>
    <p>{{post.body}}</p>
    <hr>            
    
    {% endfor %}  

    {% endif %}
------------------------------------------------
    new entry
    {% extends "base.html" %}
{% block content %}
        <form method ="post">
            <label>
                <div>Title</div>
                <input type="text" name="title" value="{{title}}">
            </label>
            <label>
                <div>Entry</div>
                <textarea name="entry">{{entry}}</textarea>
            </label>
            <div class="error">{{error}}</div>
            <input type="submit">
        </form>
{% endblock %}

------------------------------------------    
my code

class Blog(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120))
    body = db.Column(db.String(240))
    completed = db.Column(db.Boolean)

    def __init__(self, title):
        self.title = title
        #self.body = body
        self.completed = False

@app.route('/', methods=['POST', 'GET'])
def index():

    
    return render_template('blog_page.html')

@app.route('/newpost', methods=['POST', 'GET'])
def newpost():
    
    if request.method == 'POST':
        task_name = request.form['task']
        new_task = Blog(task_name)
        db.session.add(new_task)
        db.session.commit()

    tasks = Blog.query.filter_by(completed=False).all()
    completed_tasks = Blog.query.filter_by(completed=True).all()
    return render_template('blog_page.html',title="Build a Blog", 
        tasks=tasks, completed_tasks=completed_tasks)


@app.route('/blog', methods=['POST', 'GET'])
def blog():

    #task_id = int(request.form['task-id'])
    #task = Blog.query.get(task_id)
    #task.completed = True
    #db.session.add(task)
    #db.session.commit()

    return render_template('add_blog.html')


if __name__ == '__main__':
    app.run()
--------------------------------
add blog
{% extends "base.html" %}

{% block content %}
<h1>Add Blog Entry</h1>
<br>
    
    <form action='/newpost' method='post'>
        <label>
            New Task:
            <input type="text" name='task' />
        </label>
        <input type="submit" value='Add Task' />
    </form>
    <hr />


   
    
                
    {% endblock %}
------------------------------------
blog page
{% extends "base.html" %}

{% block content %}


           

    <hr />

    <h2>My Blogs</h2>

    <form action="/" method='POST'>

    
        {% if tasks|length == 0 %}
        <p>No blogs yet</p>
        {% else %}
        
            <ul>
                {% for task in tasks %}
                <li>{{task.title}}
                    <form method="POST" action="/blog" style="display:inline-block;">
                        <input type="hidden" name="task-id" value="{{task.id}}" />
                        <input type="submit" value="Done!" />
                    </form>
                    </li>
                    {% endfor %}
                </ul>
                <hr />

                <h2>My Blogs</h2>
            
                <ul>
                    {% for task in completed_tasks %}
                    <li>{{task.title}}</li>
                    {% endfor %}
                </ul>
        {% endif %}
{% endblock %}
---------------------------------
base html
